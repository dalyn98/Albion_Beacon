name: Repo Health Guard

on:
  schedule:
    - cron: "0 3 * * 1"   # 매주 월요일 12:00 KST (UTC 03:00)
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write

jobs:
  guard:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) 필수 파일 존재 / VERSION 형식 검사
      - name: Check required files & VERSION
        id: req
        run: |
          set -e
          missing=()
          for f in VERSION docs/PROJECT_GUIDELINES.md docs/blueprint.md; do
            if [ ! -f "$f" ]; then
              echo "MISSING: $f"
              missing+=("$f")
            fi
          done

          # VERSION 형식: vX.Y.Z
          ver_ok=1
          if [ -f VERSION ]; then
            if grep -Eq '^v[0-9]+\.[0-9]+\.[0-9]+$' VERSION; then
              echo "VERSION format OK: $(cat VERSION)"
            else
              echo "INVALID VERSION format: $(cat VERSION 2>/dev/null || echo '<empty>')"
              ver_ok=0
            fi
          else
            ver_ok=0
          fi

          # 결과 요약 출력
          echo "missing_count=${#missing[@]}" >> "$GITHUB_OUTPUT"
          echo "version_ok=$ver_ok" >> "$GITHUB_OUTPUT"

          # 사람이 보기 쉬운 본문 생성
          {
            echo "### Repo Health Summary"
            echo
            if [ ${#missing[@]} -gt 0 ]; then
              echo "- Missing files:"
              for m in "${missing[@]}"; do echo "  - $m"; done
            else
              echo "- Missing files: None"
            fi
            echo "- VERSION: $(cat VERSION 2>/dev/null || echo 'N/A')"
            echo "- VERSION format: $([ "$ver_ok" -eq 1 ] && echo OK || echo INVALID)"
          } > health_summary.md

      # 2) YAML Lint: 워크플로우 파싱 오류 사전 차단
      - name: YAML Lint (workflows)
        id: yamllint
        run: |
          python -m pip install --upgrade pip >/dev/null 2>&1 || true
          pip install yamllint >/dev/null 2>&1
          yamllint .github/workflows | tee yamllint.txt
        continue-on-error: true

      # 3) Ruff Lint(드라이런): 남은 린트 경고 수집 (실패해도 계속 진행)
      - name: Ruff Dry Run
        id: ruff
        run: |
          python -m pip install --upgrade pip >/dev/null 2>&1 || true
          pip install ruff >/dev/null 2>&1
          # 결과를 파일로 저장하고 종료코드에 상관없이 진행
          ruff check src 2>&1 | tee ruff.txt
          # 실패 여부를 출력 변수로 남김(0=정상, 1=에러)
          if ruff check src >/dev/null 2>&1; then echo "ok=1" >> "$GITHUB_OUTPUT"; else echo "ok=0" >> "$GITHUB_OUTPUT"; fi
        continue-on-error: true

      # 4) 실패 판단 & 이슈 업서트(있으면 코멘트 추가, 없으면 새로 생성)
      - name: Open/Update Health Issue on Problems
        if: |
          steps.req.outputs.missing_count != '0' ||
          steps.req.outputs.version_ok != '1' ||
          steps.yamllint.outcome == 'failure' ||
          steps.ruff.outputs.ok != '1'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const bodyParts = [];
            const summary = fs.readFileSync('health_summary.md', 'utf8');
            bodyParts.push(summary);

            // yamllint 첨부
            if (fs.existsSync('yamllint.txt')) {
              const y = fs.readFileSync('yamllint.txt', 'utf8').trim();
              if (y) bodyParts.push("### YAML Lint\n```\n" + y.slice(0, 60000) + "\n```");
            }

            // ruff 첨부
            if (fs.existsSync('ruff.txt')) {
              const r = fs.readFileSync('ruff.txt', 'utf8').trim();
              if (r) bodyParts.push("### Ruff Lint\n```\n" + r.slice(0, 60000) + "\n```");
            }

            const body = bodyParts.join("\n\n");
            const title = "Repo Health Guard: Attention Needed";

            // 이미 열린 health 이슈가 있으면 코멘트 추가, 없으면 새로 생성
            const { data: issues } = await github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: "health",
              state: "open",
              per_page: 10
            });

            const existing = issues.find(i => i.title === title);
            if (existing) {
              await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existing.number,
                body
              });
            } else {
              await github.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body,
                labels: ["health","notice"]
              });
            }

      # 5) 요약 출력(성공 케이스 가독성)
      - name: Print Summary
        if: always()
        run: |
          echo "----- HEALTH SUMMARY -----"
          cat health_summary.md || true
          echo "--------------------------"
